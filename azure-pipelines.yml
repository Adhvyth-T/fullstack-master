trigger:
- main

pool:
  name: 'Default'  # Self-hosted agent
  demands:
  - agent.name -equals agent2

variables:
  TF_DIR: 'terraform'        # Folder containing main.tf + k8s-deploy.tf
  JENKINS_JOB: 'lost-found-pipeline'
  JENKINS_URL: 'http://20.40.43.80:8080'
  JENKINS_USER: 'shanmuk'
  JENKINS_TOKEN: '11176f30ee7828b6dbc251fecdf069df33'
  AZURE_SERVICE_CONNECTION: 'myAzureRMServiceConnection'

stages:
# -------------------------
# Stage 1: Trigger Jenkins
# -------------------------
- stage: CI
  displayName: "Run Jenkins CI"
  jobs:
  - job: TriggerJenkins
    displayName: "Trigger Jenkins Pipeline"
    steps:
    - bash: |
        echo "Triggering Jenkins job with BRANCH=main ..."

        # Trigger Jenkins job with parameters
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$JENKINS_URL/job/$JENKINS_JOB/buildWithParameters" \
          --user "$JENKINS_USER:$JENKINS_TOKEN" \
          -d "BRANCH=main")

        if [ "$RESPONSE" -ne 201 ]; then
          echo "Failed to trigger Jenkins job, HTTP code: $RESPONSE"
          exit 1
        fi

        echo "Jenkins job triggered successfully."
      displayName: "Trigger Jenkins Build"



# -------------------------
# Stage 2: Terraform Deploy
# -------------------------
- stage: CD
  displayName: "Deploy App to AKS"
  dependsOn: CI
  jobs:
  - job: Terraform
    displayName: "Terraform Deploy"
    steps:
    # Checkout repo
    - checkout: self

    # Verify Terraform installed
    - bash: terraform -version
      displayName: "Check Terraform"

    # Terraform Init, Import & Apply using AzureCLI authentication
    - task: AzureCLI@2
      displayName: "Terraform Init, Import & Apply"
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Working directory: $(Build.SourcesDirectory)/$(TF_DIR)"
          cd $(Build.SourcesDirectory)/$(TF_DIR)

          # Export ARM_* env vars for Terraform (uses Azure CLI login from this task)
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_TENANT_ID=$(az account show --query tenantId -o tsv)

          # Initialize Terraform
          terraform init -input=false

          # Import existing AKS cluster into Terraform state (ignore if already imported)
          terraform import azurerm_kubernetes_cluster.aks "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/devops-pipeline-rg/providers/Microsoft.ContainerService/managedClusters/devops-pipeline-aks" || true

          # Import existing Kubernetes deployments
          terraform import kubernetes_deployment.backend default/backend || true
          terraform import kubernetes_deployment.frontend default/frontend || true

          # Validate Terraform files
          terraform validate

          # Plan & apply
          terraform plan -out=tfplan -input=false
          terraform apply -input=false -auto-approve tfplan

    # Output Frontend LoadBalancer IP
    - bash: |
        cd $(Build.SourcesDirectory)/$(TF_DIR)
        echo "Frontend LoadBalancer IP:" 
        terraform output frontend_service_ip
      displayName: "Get Frontend LB IP"

