trigger:
- main

pool:
  name: 'Default'  # Your self-hosted agent pool
  demands:
  - agent.name -equals agent2

stages:
# ------------------
# Stage 1: Trigger Jenkins
# ------------------
- stage: CI
  displayName: "Run Jenkins CI"
  jobs:
  - job: TriggerJenkins
    displayName: "Trigger Jenkins Pipeline"
    steps:
    - bash: |
        echo "Triggering Jenkins job..."
        curl -X POST "http://20.40.43.80:8080//job/lost-found-pipeline/build" \
          --user "shanmuk:11176f30ee7828b6dbc251fecdf069df33"
      displayName: "Trigger Jenkins Build"

# ------------------
# Stage 2: Terraform Deploy
# ------------------
- stage: CD
  displayName: "Deploy App to AKS"
  dependsOn: CI
  jobs:
  - job: Terraform
    displayName: "Terraform Deploy"
    steps:
    - checkout: self

    - bash: terraform -version
      displayName: "Check Terraform"

    - task: AzureCLI@2
      displayName: "Terraform Init & Apply"
      inputs:
        azureSubscription: 'myAzureRMServiceConnection'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        inlineScript: |
          export ARM_CLIENT_ID=$servicePrincipalId
          export ARM_CLIENT_SECRET=$servicePrincipalKey
          export ARM_TENANT_ID=$tenantId
          export ARM_SUBSCRIPTION_ID=$subscriptionId

          cd $(Build.SourcesDirectory)/terraform

          terraform init -input=false
          terraform validate
          terraform plan -out=tfplan -input=false \
            -var "subscription_id=$ARM_SUBSCRIPTION_ID" \
            -var "tenant_id=$ARM_TENANT_ID" \
            -var "client_id=$ARM_CLIENT_ID" \
            -var "client_secret=$ARM_CLIENT_SECRET"

          terraform apply -input=false -auto-approve tfplan


